/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package moreDemo;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.hibernate.Query;
import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.hibernate.Transaction;
import org.hibernate.cfg.Configuration;
import org.hibernate.query.NativeQuery;

public class App {
    public static void main(String[] args) {
        
    	Configuration con = new Configuration().configure("hibernate.cfg.xml").addAnnotatedClass(People.class)
    			.addAnnotatedClass(Cloths.class);
    	SessionFactory sf = con.buildSessionFactory();
    	
    
        
        Session s1 = sf.openSession();
        Transaction tx = s1.beginTransaction();
        
        System.out.println("--------------------------------------------------------");
        //selection query
//        Query q = s1.createQuery("select p_name from People where p_ID = :u");
//        q.setParameter("u", 1);
//        
////        List<People> p = q.list();
//        Object p = q.uniqueResult();
//        
////        p.forEach(System.out::println);
//        System.out.println(p);
        System.out.println("--------------------------------------------------------");
        //delete data from table 
//        Query q1 = s1.createQuery("delete from People where p_ID = :a");
//        q1.setParameter("a", 2);
//        //this statement return int value that how many record deleted
//        System.out.println(
//        q1.executeUpdate()
//        		);
        
        System.out.println("--------------------------------------------------------");
//        //update operation 
//        Query q2 = s1.createQuery("update People  set p_name=:i where p_ID=:j");
//        q2.setParameter("i","Jack");
//        q2.setParameter("j",1);
//      //return int value
//        System.out.println(
//                q2.executeUpdate()
//                		);
        //join is still not done
//        Query q3 = s1.createQuery("select q.p_ID , q.p_name , a.closth from People as q INNER JOIN q.closth as a");
//        List<Object[]> p1 = q3.list();
//        p1.forEach(System.out::println);
        
        System.out.println("--------------------------------------------------------");
        
        // use native query (SQL)
        
        NativeQuery q4 = s1.createSQLQuery("select * from student");
        
        List<Object[]> ob1 = q4.list();
        
        for (Object[] o: ob1) {
        	
        	System.out.println(o[0]+" : "+o[1]+" : "+o[2]);
        }
        
        //cascading is used save releded entity 
        //EX : we wanat to save 1 question with 100 answers 
        //So without saving all answers in session we can simply use cascading 
        //(cascade = CascadeType.All) <-- write it in your question mapping 
        
        tx.commit();
        s1.close();
        


        
       
    }
}
